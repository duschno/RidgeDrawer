<Window x:Class="RidgeDrawerUI.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:RidgeDrawerUI"
        mc:Ignorable="d"
        x:Name="Window"
        Height="800" Width="1000" MinWidth="640" MinHeight="480"
        KeyDown="Window_KeyDown" WindowStartupLocation="CenterScreen" PreviewMouseDown="Window_MouseDown"
        ResizeMode="CanResizeWithGrip" Loaded="Window_Loaded">
    <!-- add desing time values, move specific controls to separate xaml and load it dynamically-->
    <Window.Resources>
        <ResourceDictionary>
            <local:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <local:EnumToStringConverter x:Key="EnumToStringConverter"/>
            <Style TargetType="{x:Type Button}">
                <Setter Property="Width" Value="80"/>
                <Setter Property="Height" Value="20"/>
            </Style>
            <Style TargetType="{x:Type Button}" x:Key="FullsizeButtonStyle">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Opacity" Value="1"/>
                        <Setter Property="Cursor" Value="Arrow"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="False">
                        <Setter Property="Opacity" Value="0.5"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type TextBox}">
                <Setter Property="Width" Value="100"/>
                <Setter Property="Height" Value="20"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="TextWrapping" Value="Wrap"/>
                <Setter Property="Margin" Value="84,-22,0,0"/>
                <EventSetter Event="KeyDown" Handler="TextBox_KeyDown"/>
                <EventSetter Event="PreviewKeyDown" Handler="TextBox_PreviewKeyDown"/>
            </Style>
            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="Margin" Value="15,5,0,0"/>
                <EventSetter Event="Checked" Handler="Control_ParamChanged"/>
                <EventSetter Event="Unchecked" Handler="Control_ParamChanged"/>
            </Style>
            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="Padding" Value="5"/>
                <Setter Property="Margin" Value="10,4,0,0"/>
            </Style>
            <Style TargetType="{x:Type TextBlock}" x:Key="StatusBarTextBlock">
                <Setter Property="FontFamily" Value="Consolas"/>
            </Style>
            <Style TargetType="{x:Type ComboBox}" x:Key="ComboBoxBaseStyle">
                <Setter Property="Width" Value="100"/>
                <Setter Property="Height" Value="20"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="Margin" Value="84,-22,0,0"/>
                <EventSetter Event="SelectionChanged" Handler="Control_ParamChanged"/>
            </Style>
            <Style TargetType="{x:Type ComboBox}" x:Key="ComboBoxEnumStyle" 
                   BasedOn="{StaticResource ComboBoxBaseStyle}">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock Text="{Binding Converter={StaticResource EnumToStringConverter}}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <ScrollViewer Grid.Column="0" Width="210" VerticalScrollBarVisibility="Auto"
                          Background="White">
                <StackPanel Width="200" HorizontalAlignment="Left" Grid.Row="0">
                    <!--#region Common buttons-->
                    <Button Content="Open (O)" Margin="15,10,0,0" Click="Open_Click" HorizontalAlignment="Left"/>
                    <Button Content="Compare (C)" Margin="0,-20,16,0" Click="Compare_Click" HorizontalAlignment="Right"/>
                    <Button Content="Save (S)" Margin="15,10,0,0" Click="Save_Click" HorizontalAlignment="Left"/>
                    <Button Content="Reset (R)" Margin="0,-20,16,0" Click="Reset_Click" HorizontalAlignment="Right"/>
                    <!--#endregion-->

                    <Separator Height="8" Visibility="Hidden"/>

                    <TextBlock Text="Effect"/>
                    <ComboBox x:Name="Effect" TabIndex="11" 
                              Style="{StaticResource ComboBoxEnumStyle}" SelectedItem="{Binding Param.Effect}"/>

                    <TextBlock Text="Backend"/>
                    <ComboBox x:Name="Backend" TabIndex="12"
                              Style="{StaticResource ComboBoxBaseStyle}" SelectedItem="{Binding Param.Backend}"
                              DisplayMemberPath="Name"/>

                    <TextBlock Text="Smoothing"/>
                    <ComboBox x:Name="Smoothing" TabIndex="9" 
                              Style="{StaticResource ComboBoxEnumStyle}" SelectedItem="{Binding Param.Smoothing}"/>

                    <CheckBox x:Name="Debug" Content="Debug (D)"
                                  TabIndex="16" IsChecked="{Binding Param.Debug}"/>
                    <StackPanel Margin="15,0,0,0" Visibility="{Binding IsChecked, ElementName=Debug,
                                                               Converter={StaticResource BooleanToVisibilityConverter}}">
                        <CheckBox x:Name="DebugSpecificOption" Content="Not in use" TabIndex="17"/>
                    </StackPanel>

                    <Separator Height="8" Visibility="Hidden"/>

                    <!--#region Text boxes-->
                    <TextBlock Text="Lines count"/>
                    <TextBox x:Name="LinesCount" PreviewTextInput="PositiveNumberValidation" 
                                 TabIndex="0" Text="{Binding Param.LinesCount}"/>

                    <TextBlock Text="Stroke"/>
                    <TextBox x:Name="Stroke" PreviewTextInput="PositiveNumberValidation"
                                 TabIndex="1" Text="{Binding Param.Stroke}"/>

                    <TextBlock Text="Factor"/>
                    <TextBox x:Name="Factor" PreviewTextInput="PositiveNumberValidation"
                                 TabIndex="2" Text="{Binding Param.Factor}"/>

                    <TextBlock Text="Chunk size"/>
                    <TextBox x:Name="ChunkSize" PreviewTextInput="PositiveNumberValidation"
                                 TabIndex="3" Text="{Binding Param.ChunkSize}"/>

                    <TextBlock Text="Angle"/>
                    <TextBox x:Name="Angle" PreviewTextInput="AngleValidation"
                                 TabIndex="4" Text="{Binding Param.Angle}"/>
                    
                    <TextBlock Text="Grey point"/>
                    <TextBox x:Name="GreyPoint" PreviewTextInput="ColorRangeValidation"
                                 TabIndex="5" Text="{Binding Param.GreyPoint}"/>
                    
                    <TextBlock Text="Black point"/>
                    <TextBox x:Name="BlackPoint" PreviewTextInput="ColorRangeValidation"
                                 TabIndex="6" Text="{Binding Param.BlackPoint}"/>

                    <TextBlock Text="White point"/>
                    <TextBox x:Name="WhitePoint" PreviewTextInput="ColorRangeValidation"
                                 TabIndex="7" Text="{Binding Param.WhitePoint}"/>
                    
                    <TextBlock Text="Points around peak" TextWrapping="Wrap" Width="70"/>
                    <TextBox x:Name="PointsAroundPeak"
                                 TabIndex="8" Text="{Binding Param.PointsAroundPeak}"/>
                    <!--#endregion-->

                    <Separator Height="8" Visibility="Hidden"/>



                    <!--#region Combo boxes-->
                    <TextBlock Text="LineType" />
                    <ComboBox x:Name="LineType" TabIndex="10" 
                              Style="{StaticResource ComboBoxEnumStyle}" SelectedItem="{Binding Param.LineType}"/>
                    <!--#endregion-->

                    <Separator Height="7" Visibility="Hidden"/>

                    <!--#region Check boxes-->
                    <CheckBox x:Name="DrawOnSides" Content="Draw on sides"
                                  TabIndex="13" IsChecked="{Binding Param.DrawOnSides}"/>
                    <CheckBox x:Name="FillInside" Content="Fill inside"
                                  TabIndex="14" IsChecked="{Binding Param.FillInside}"/>
                    <CheckBox x:Name="Invert" Content="Invert"
                                  TabIndex="15" IsChecked="{Binding Param.Invert}"/>

                    <!--#endregion-->

                    <Separator Height="7" Visibility="Hidden"/>

                    <!--#region Specific params-->
                    <TextBlock Text="Specific parameters:"/>
                    <TextBlock Text="Pull to"/>
                    <TextBlock Text="X" Margin="67,-26,0,0"/>
                    <TextBox x:Name="PullPointX" PreviewTextInput="PositiveNumberValidation"
                             TabIndex="18" Margin="84,-22,0,0" Width="40"
                             Text="{Binding Param.PullPointX}"/>
                    <TextBlock Text="Y" Margin="127,-26,0,0"/>
                    <TextBox x:Name="PullPointY" PreviewTextInput="PositiveNumberValidation"
                             TabIndex="19" Margin="144,-22,0,0" Width="40"
                             Text="{Binding Param.PullPointY}"/>
                    <Button x:Name="PullPointButton" Content="Point by click"
                                Margin="84,5,0,0" Click="PullPointButton_Click"
                                HorizontalAlignment="Left"
                                Width="100"/>
                    <!--#endregion-->
                </StackPanel>
            </ScrollViewer>

            <Border x:Name="ViewportBorder" BorderBrush="DarkOrange" Grid.Column="1"/>
            <Grid Name="Viewport" SnapsToDevicePixels="True" UseLayoutRounding="True" Grid.Column="1" Panel.ZIndex="-1"
                  SizeChanged="Viewport_SizeChanged"
                  MouseWheel="Viewport_MouseWheel"
                  MouseMove="Viewport_MouseMove"
                  MouseLeftButtonDown="Viewport_MouseLeftButtonDown"
                  MouseLeftButtonUp="Viewport_MouseLeftButtonUp"
                  MouseLeave="Viewport_MouseLeave" Focusable="True">
                <Rectangle x:Name="DebugPousePositionX" HorizontalAlignment="Left" Fill="DarkOrange"
                           Panel.ZIndex="4" Width="1" Visibility="Collapsed"/>
                <Rectangle x:Name="DebugPousePositionY" VerticalAlignment="Top" Fill="DarkOrange"
                           Panel.ZIndex="4" Height="1" Visibility="Collapsed"/>
                <Button x:Name="FullsizeButton" Content="Fullsize (0/F)" Style="{StaticResource FullsizeButtonStyle}"
                        HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top"
                        Panel.ZIndex="2" Width="80" Height="20" Click="FullsizeButton_Click"/>
                <Border Panel.ZIndex="3" VerticalAlignment="Center" HorizontalAlignment="Center"
                        Margin="10" CornerRadius="5" Background="#1E1E1E"
                        Visibility="{Binding Visibility, ElementName=Error}">
                    <TextBlock x:Name="Error" TextWrapping="Wrap"
                       Foreground="#E6E4E1" Visibility="Hidden" FontFamily="Consolas"/>
                </Border>
                <Image x:Name="Image" Stretch="None" Panel.ZIndex="1">
                    <Image.ContextMenu>
                        <ContextMenu>
                            <MenuItem x:Name="CopyImage" Header="Copy" Click="CopyImage_Click"/>
                        </ContextMenu>
                    </Image.ContextMenu>
                </Image>
                <Rectangle Fill="Gray"/>
            </Grid>
        </Grid>
        <StatusBar Grid.Row="1">
            <StatusBarItem Width="210">
                <TextBlock Name="CursorPosition" Style="{StaticResource StatusBarTextBlock}"/>
            </StatusBarItem>
            <StatusBarItem>
                <TextBlock Name="ColorValue" Style="{StaticResource StatusBarTextBlock}" Width="75"/>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Stretch" Margin="0,0,17,0" HorizontalContentAlignment="Stretch">
                <TextBlock Name="Arguments" Style="{StaticResource StatusBarTextBlock}" TextAlignment="Right">
                    <TextBlock.ContextMenu>
                        <ContextMenu>
                            <MenuItem x:Name="CopyArgs" Header="Copy" Click="CopyArgs_Click"/>
                            <MenuItem x:Name="PasteArgs" Header="Paste" Click="PasteArgs_Click"/>
                        </ContextMenu>
                    </TextBlock.ContextMenu>
                </TextBlock>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
